name: Deploy to Vercel

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  lint-and-typecheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run linter
        run: yarn lint

      - name: Run type check
        run: yarn type-check

      - name: Build project
        run: yarn build

  # deploy-preview:
  #   runs-on: ubuntu-latest
  #   needs: lint-and-typecheck
  #   if: github.event_name == 'pull_request'
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '18'
  #         cache: 'yarn'

  #     - name: Install Vercel CLI
  #       run: npm install --global vercel@latest

  #     - name: Pull Vercel Environment Information
  #       run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

  #     - name: Build Project Artifacts
  #       run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

  #     - name: Deploy Project Artifacts to Vercel
  #       run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

  # deploy-production:
  #   runs-on: ubuntu-latest
  #   needs: lint-and-typecheck
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '18'
  #         cache: 'yarn'

  #     - name: Install Vercel CLI
  #       run: npm install --global vercel@latest

  #     - name: Pull Vercel Environment Information
  #       run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

  #     - name: Build Project Artifacts
  #       run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

  #     - name: Deploy Project Artifacts to Vercel
  #       run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
